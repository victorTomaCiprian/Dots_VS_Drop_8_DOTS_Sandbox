//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Unity.Mathematics;
using UnityEngine;
using Assert = Unity.Assertions.Assert;

namespace Runtime.Mathematics
{
    public enum MathGeneratedFunction
    {
        MinIntInt = 0,
        MinFloatFloat = 1,
        MinFloat2Float2 = 2,
        MinFloat3Float3 = 3,
        MinFloat4Float4 = 4,
        MaxIntInt = 5,
        MaxFloatFloat = 6,
        MaxFloat2Float2 = 7,
        MaxFloat3Float3 = 8,
        MaxFloat4Float4 = 9,
        AbsInt = 10,
        AbsFloat = 11,
        AbsFloat2 = 12,
        AbsFloat3 = 13,
        AbsFloat4 = 14,
        DotIntInt = 15,
        DotFloatFloat = 16,
        DotFloat2Float2 = 17,
        DotFloat3Float3 = 18,
        DotFloat4Float4 = 19,
        TanFloat = 20,
        TanFloat2 = 21,
        TanFloat3 = 22,
        TanFloat4 = 23,
        TanhFloat = 24,
        TanhFloat2 = 25,
        TanhFloat3 = 26,
        TanhFloat4 = 27,
        AtanFloat = 28,
        AtanFloat2 = 29,
        AtanFloat3 = 30,
        AtanFloat4 = 31,
        Atan2FloatFloat = 32,
        Atan2Float2Float2 = 33,
        Atan2Float3Float3 = 34,
        Atan2Float4Float4 = 35,
        CosFloat = 36,
        CosFloat2 = 37,
        CosFloat3 = 38,
        CosFloat4 = 39,
        CoshFloat = 40,
        CoshFloat2 = 41,
        CoshFloat3 = 42,
        CoshFloat4 = 43,
        AcosFloat = 44,
        AcosFloat2 = 45,
        AcosFloat3 = 46,
        AcosFloat4 = 47,
        SinFloat = 48,
        SinFloat2 = 49,
        SinFloat3 = 50,
        SinFloat4 = 51,
        SinhFloat = 52,
        SinhFloat2 = 53,
        SinhFloat3 = 54,
        SinhFloat4 = 55,
        AsinFloat = 56,
        AsinFloat2 = 57,
        AsinFloat3 = 58,
        AsinFloat4 = 59,
        FloorFloat = 60,
        FloorFloat2 = 61,
        FloorFloat3 = 62,
        FloorFloat4 = 63,
        CeilFloat = 64,
        CeilFloat2 = 65,
        CeilFloat3 = 66,
        CeilFloat4 = 67,
        RoundFloat = 68,
        RoundFloat2 = 69,
        RoundFloat3 = 70,
        RoundFloat4 = 71,
        SignFloat = 72,
        SignFloat2 = 73,
        SignFloat3 = 74,
        SignFloat4 = 75,
        PowFloatFloat = 76,
        PowFloat2Float2 = 77,
        PowFloat3Float3 = 78,
        PowFloat4Float4 = 79,
        ExpFloat = 80,
        ExpFloat2 = 81,
        ExpFloat3 = 82,
        ExpFloat4 = 83,
        Log2Float = 84,
        Log2Float2 = 85,
        Log2Float3 = 86,
        Log2Float4 = 87,
        Log10Float = 88,
        Log10Float2 = 89,
        Log10Float3 = 90,
        Log10Float4 = 91,
        SqrtFloat = 92,
        SqrtFloat2 = 93,
        SqrtFloat3 = 94,
        SqrtFloat4 = 95,
        CrossFloat3Float3 = 96,
        AddIntFloat = 97,
        AddFloatInt = 98,
        SubtractIntFloat = 99,
        SubtractFloatInt = 100,
        MultiplyFloatInt = 101,
        MultiplyIntFloat = 102,
        MultiplyFloat2Float = 103,
        MultiplyFloatFloat2 = 104,
        MultiplyFloat3Float = 105,
        MultiplyFloatFloat3 = 106,
        MultiplyFloat4Float = 107,
        MultiplyFloatFloat4 = 108,
        AddIntInt = 109,
        AddFloatFloat = 110,
        AddFloat2Float2 = 111,
        AddFloat3Float3 = 112,
        AddFloat4Float4 = 113,
        SubtractIntInt = 114,
        SubtractFloatFloat = 115,
        SubtractFloat2Float2 = 116,
        SubtractFloat3Float3 = 117,
        SubtractFloat4Float4 = 118,
        DivideIntInt = 119,
        DivideFloatFloat = 120,
        MultiplyIntInt = 121,
        MultiplyFloatFloat = 122,
        ModuloIntInt = 123,
        NegateFloat = 124,
        NegateFloat2 = 125,
        NegateFloat3 = 126,
        NegateFloat4 = 127,
        NegateInt = 128,
        CubicRootFloat = 129,
        NumMathFunctions = 130,
    }

    public static class MathGeneratedDelegates
    {
        public static int GenerationVersion => 746534450;

        internal static MathValueDelegate[] s_Delegates =
        {
            values =>     // MinIntInt
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.min(result.Int, values[i].Int);
                return result;
            },
            values =>     // MinFloatFloat
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.min(result.Float, values[i].Float);
                return result;
            },
            values =>     // MinFloat2Float2
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.min(result.Float2, values[i].Float2);
                return result;
            },
            values =>     // MinFloat3Float3
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.min(result.Float3, values[i].Float3);
                return result;
            },
            values =>     // MinFloat4Float4
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.min(result.Float4, values[i].Float4);
                return result;
            },
            values =>     // MaxIntInt
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.max(result.Int, values[i].Int);
                return result;
            },
            values =>     // MaxFloatFloat
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.max(result.Float, values[i].Float);
                return result;
            },
            values =>     // MaxFloat2Float2
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.max(result.Float2, values[i].Float2);
                return result;
            },
            values =>     // MaxFloat3Float3
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.max(result.Float3, values[i].Float3);
                return result;
            },
            values =>     // MaxFloat4Float4
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = math.max(result.Float4, values[i].Float4);
                return result;
            },
            values => math.abs(values[0].Int),     // AbsInt
            values => math.abs(values[0].Float),     // AbsFloat
            values => math.abs(values[0].Float2),     // AbsFloat2
            values => math.abs(values[0].Float3),     // AbsFloat3
            values => math.abs(values[0].Float4),     // AbsFloat4
            values => math.dot(values[0].Int, values[1].Int),     // DotIntInt
            values => math.dot(values[0].Float, values[1].Float),     // DotFloatFloat
            values => math.dot(values[0].Float2, values[1].Float2),     // DotFloat2Float2
            values => math.dot(values[0].Float3, values[1].Float3),     // DotFloat3Float3
            values => math.dot(values[0].Float4, values[1].Float4),     // DotFloat4Float4
            values => math.tan(values[0].Float),     // TanFloat
            values => math.tan(values[0].Float2),     // TanFloat2
            values => math.tan(values[0].Float3),     // TanFloat3
            values => math.tan(values[0].Float4),     // TanFloat4
            values => math.tanh(values[0].Float),     // TanhFloat
            values => math.tanh(values[0].Float2),     // TanhFloat2
            values => math.tanh(values[0].Float3),     // TanhFloat3
            values => math.tanh(values[0].Float4),     // TanhFloat4
            values => math.atan(values[0].Float),     // AtanFloat
            values => math.atan(values[0].Float2),     // AtanFloat2
            values => math.atan(values[0].Float3),     // AtanFloat3
            values => math.atan(values[0].Float4),     // AtanFloat4
            values => math.atan2(values[0].Float, values[1].Float),     // Atan2FloatFloat
            values => math.atan2(values[0].Float2, values[1].Float2),     // Atan2Float2Float2
            values => math.atan2(values[0].Float3, values[1].Float3),     // Atan2Float3Float3
            values => math.atan2(values[0].Float4, values[1].Float4),     // Atan2Float4Float4
            values => math.cos(values[0].Float),     // CosFloat
            values => math.cos(values[0].Float2),     // CosFloat2
            values => math.cos(values[0].Float3),     // CosFloat3
            values => math.cos(values[0].Float4),     // CosFloat4
            values => math.cosh(values[0].Float),     // CoshFloat
            values => math.cosh(values[0].Float2),     // CoshFloat2
            values => math.cosh(values[0].Float3),     // CoshFloat3
            values => math.cosh(values[0].Float4),     // CoshFloat4
            values => math.acos(values[0].Float),     // AcosFloat
            values => math.acos(values[0].Float2),     // AcosFloat2
            values => math.acos(values[0].Float3),     // AcosFloat3
            values => math.acos(values[0].Float4),     // AcosFloat4
            values => math.sin(values[0].Float),     // SinFloat
            values => math.sin(values[0].Float2),     // SinFloat2
            values => math.sin(values[0].Float3),     // SinFloat3
            values => math.sin(values[0].Float4),     // SinFloat4
            values => math.sinh(values[0].Float),     // SinhFloat
            values => math.sinh(values[0].Float2),     // SinhFloat2
            values => math.sinh(values[0].Float3),     // SinhFloat3
            values => math.sinh(values[0].Float4),     // SinhFloat4
            values => math.asin(values[0].Float),     // AsinFloat
            values => math.asin(values[0].Float2),     // AsinFloat2
            values => math.asin(values[0].Float3),     // AsinFloat3
            values => math.asin(values[0].Float4),     // AsinFloat4
            values => math.floor(values[0].Float),     // FloorFloat
            values => math.floor(values[0].Float2),     // FloorFloat2
            values => math.floor(values[0].Float3),     // FloorFloat3
            values => math.floor(values[0].Float4),     // FloorFloat4
            values => math.ceil(values[0].Float),     // CeilFloat
            values => math.ceil(values[0].Float2),     // CeilFloat2
            values => math.ceil(values[0].Float3),     // CeilFloat3
            values => math.ceil(values[0].Float4),     // CeilFloat4
            values => math.round(values[0].Float),     // RoundFloat
            values => math.round(values[0].Float2),     // RoundFloat2
            values => math.round(values[0].Float3),     // RoundFloat3
            values => math.round(values[0].Float4),     // RoundFloat4
            values => math.sign(values[0].Float),     // SignFloat
            values => math.sign(values[0].Float2),     // SignFloat2
            values => math.sign(values[0].Float3),     // SignFloat3
            values => math.sign(values[0].Float4),     // SignFloat4
            values => math.pow(values[0].Float, values[1].Float),     // PowFloatFloat
            values => math.pow(values[0].Float2, values[1].Float2),     // PowFloat2Float2
            values => math.pow(values[0].Float3, values[1].Float3),     // PowFloat3Float3
            values => math.pow(values[0].Float4, values[1].Float4),     // PowFloat4Float4
            values => math.exp(values[0].Float),     // ExpFloat
            values => math.exp(values[0].Float2),     // ExpFloat2
            values => math.exp(values[0].Float3),     // ExpFloat3
            values => math.exp(values[0].Float4),     // ExpFloat4
            values => math.log2(values[0].Float),     // Log2Float
            values => math.log2(values[0].Float2),     // Log2Float2
            values => math.log2(values[0].Float3),     // Log2Float3
            values => math.log2(values[0].Float4),     // Log2Float4
            values => math.log10(values[0].Float),     // Log10Float
            values => math.log10(values[0].Float2),     // Log10Float2
            values => math.log10(values[0].Float3),     // Log10Float3
            values => math.log10(values[0].Float4),     // Log10Float4
            values => math.sqrt(values[0].Float),     // SqrtFloat
            values => math.sqrt(values[0].Float2),     // SqrtFloat2
            values => math.sqrt(values[0].Float3),     // SqrtFloat3
            values => math.sqrt(values[0].Float4),     // SqrtFloat4
            values => math.cross(values[0].Float3, values[1].Float3),     // CrossFloat3Float3
            values =>     // AddIntFloat
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Int + values[i].Float;
                return result;
            },
            values =>     // AddFloatInt
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float + values[i].Int;
                return result;
            },
            values => values[0].Int - values[1].Float,     // SubtractIntFloat
            values => values[0].Float - values[1].Int,     // SubtractFloatInt
            values =>     // MultiplyFloatInt
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float * values[i].Int;
                return result;
            },
            values =>     // MultiplyIntFloat
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Int * values[i].Float;
                return result;
            },
            values =>     // MultiplyFloat2Float
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float2 * values[i].Float;
                return result;
            },
            values =>     // MultiplyFloatFloat2
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float * values[i].Float2;
                return result;
            },
            values =>     // MultiplyFloat3Float
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float3 * values[i].Float;
                return result;
            },
            values =>     // MultiplyFloatFloat3
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float * values[i].Float3;
                return result;
            },
            values =>     // MultiplyFloat4Float
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float4 * values[i].Float;
                return result;
            },
            values =>     // MultiplyFloatFloat4
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float * values[i].Float4;
                return result;
            },
            values =>     // AddIntInt
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Int + values[i].Int;
                return result;
            },
            values =>     // AddFloatFloat
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float + values[i].Float;
                return result;
            },
            values =>     // AddFloat2Float2
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float2 + values[i].Float2;
                return result;
            },
            values =>     // AddFloat3Float3
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float3 + values[i].Float3;
                return result;
            },
            values =>     // AddFloat4Float4
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float4 + values[i].Float4;
                return result;
            },
            values => values[0].Int - values[1].Int,     // SubtractIntInt
            values => values[0].Float - values[1].Float,     // SubtractFloatFloat
            values => values[0].Float2 - values[1].Float2,     // SubtractFloat2Float2
            values => values[0].Float3 - values[1].Float3,     // SubtractFloat3Float3
            values => values[0].Float4 - values[1].Float4,     // SubtractFloat4Float4
            values => values[0].Int / values[1].Int,     // DivideIntInt
            values => values[0].Float / values[1].Float,     // DivideFloatFloat
            values =>     // MultiplyIntInt
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Int * values[i].Int;
                return result;
            },
            values =>     // MultiplyFloatFloat
            {
                Assert.IsTrue(values.Length >= 2);
                var result = values[0];
                for (int i = 1; i < values.Length; ++i)
                    result = result.Float * values[i].Float;
                return result;
            },
            values => values[0].Int % values[1].Int,     // ModuloIntInt
            values => - values[0].Float,     // NegateFloat
            values => - values[0].Float2,     // NegateFloat2
            values => - values[0].Float3,     // NegateFloat3
            values => - values[0].Float4,     // NegateFloat4
            values => - values[0].Int,     // NegateInt
            values => math.pow(math.abs(values[0].Float), 1f / 3f),     // CubicRootFloat
        };
    }
}
